# -*- coding: utf-8 -*-
"""major project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15BhQHZJo5fhvDnoFi3jDhO_yg0HkHn73
"""

import pandas as pd
import json
import matplotlib.pyplot as plt
import seaborn as sns
import os
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import joblib

# Create directory for saving plots
os.makedirs("plots", exist_ok=True)

# Load JSON data
with open('/content/sensor-data (2).json', 'r') as file:
    data = json.load(file)

df = pd.DataFrame(data)

# Convert timestamp to datetime
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Save summary report
report_content = "Data Overview:\n" + str(df.describe())
with open("report.txt", "w") as report_file:
    report_file.write(report_content)

# Function to save plots
def save_plot(filename):
    plt.savefig(os.path.join("plots", filename))
    plt.close()

# Temperature Trend
plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x='timestamp', y='temperature', label='Temperature', color='red')
plt.title("Temperature Trend Over Time")
plt.xlabel("Timestamp")
plt.ylabel("Temperature (Â°C)")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
save_plot("temperature_trend.png")

# Humidity Trend
plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x='timestamp', y='humidity', label='Humidity', color='blue')
plt.title("Humidity Trend Over Time")
plt.xlabel("Timestamp")
plt.ylabel("Humidity (%)")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
save_plot("humidity_trend.png")

# Correlation Matrix
plt.figure(figsize=(8, 6))
corr = df[['temperature', 'humidity', 'sound', 'gas', 'flame']].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix Between Features")
save_plot("correlation_matrix.png")

# Linear Regression Model
features = ['humidity', 'sound', 'gas', 'flame']
X = df[features]
y = df['temperature']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Save the model
joblib.dump(model, "temperature_model.pkl")

# Model Evaluation
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5

with open("report.txt", "a") as report_file:
    report_file.write(f"\nModel Evaluation:\nMAE: {mae}\nMSE: {mse}\nRMSE: {rmse}")

print("All images saved in 'plots/' directory. Report generated as 'report.txt'. Model saved as 'temperature_model.pkl'.")